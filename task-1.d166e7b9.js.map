{"version":3,"sources":["js/task-1.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then"],"mappings":";AAIA,IAAMA,EAAQ,SAACC,GACN,OAAA,IAAIC,QAAQ,SAACC,EAASC,GAC3BC,WAAW,WAIPF,KAID,QAGDG,EAAS,SAACC,GAASC,OAAAA,QAAQC,IAAsBF,kBAAAA,OAAAA,EAAxC,QAGfP,EAAM,KAAMU,KAAKJ,EAAO,MACxBN,EAAM,KAAMU,KAAKJ,EAAO,MACxBN,EAAM,MAAMU,KAAKJ,EAAO","file":"task-1.d166e7b9.js","sourceRoot":"..\\src","sourcesContent":["// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\"\r\n// через ms миллисекунд.Значением исполнившегося промиса должно быть то кол -\r\n//   во миллисекунд которое передали во время вызова функции delay.\r\n\r\nconst delay = (ms) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const success = true;\r\n\r\n      if (success) {\r\n        resolve();\r\n      } else {\r\n        reject(console.log(\"error\"));\r\n      }\r\n    }, 2000);\r\n  });\r\n};\r\nconst logger = (time) => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger(2000)); // Resolved after 2000ms\r\ndelay(1000).then(logger(1000)); // Resolved after 1000ms\r\ndelay(1500).then(logger(1500)); // Resolved after 1500ms\r\n"]}